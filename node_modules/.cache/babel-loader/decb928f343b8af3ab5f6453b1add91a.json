{"ast":null,"code":"/** @license React v16.5.2\n * schedule.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n\nif (process.env.NODE_ENV !== \"production\") {\n  (function () {\n    'use strict';\n\n    Object.defineProperty(exports, '__esModule', {\n      value: true\n    });\n    /* eslint-disable no-var */\n    // TODO: Currently there's only a single priority level, Deferred. Will add\n    // additional priorities.\n\n    var DEFERRED_TIMEOUT = 5000; // Callbacks are stored as a circular, doubly linked list.\n\n    var firstCallbackNode = null;\n    var isPerformingWork = false;\n    var isHostCallbackScheduled = false;\n    var hasNativePerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';\n    var timeRemaining;\n\n    if (hasNativePerformanceNow) {\n      timeRemaining = function timeRemaining() {\n        // We assume that if we have a performance timer that the rAF callback\n        // gets a performance timer value. Not sure if this is always true.\n        var remaining = getFrameDeadline() - performance.now();\n        return remaining > 0 ? remaining : 0;\n      };\n    } else {\n      timeRemaining = function timeRemaining() {\n        // Fallback to Date.now()\n        var remaining = getFrameDeadline() - Date.now();\n        return remaining > 0 ? remaining : 0;\n      };\n    }\n\n    var deadlineObject = {\n      timeRemaining: timeRemaining,\n      didTimeout: false\n    };\n\n    function ensureHostCallbackIsScheduled() {\n      if (isPerformingWork) {\n        // Don't schedule work yet; wait until the next time we yield.\n        return;\n      } // Schedule the host callback using the earliest timeout in the list.\n\n\n      var timesOutAt = firstCallbackNode.timesOutAt;\n\n      if (!isHostCallbackScheduled) {\n        isHostCallbackScheduled = true;\n      } else {\n        // Cancel the existing host callback.\n        cancelCallback();\n      }\n\n      requestCallback(flushWork, timesOutAt);\n    }\n\n    function flushFirstCallback(node) {\n      var flushedNode = firstCallbackNode; // Remove the node from the list before calling the callback. That way the\n      // list is in a consistent state even if the callback throws.\n\n      var next = firstCallbackNode.next;\n\n      if (firstCallbackNode === next) {\n        // This is the last callback in the list.\n        firstCallbackNode = null;\n        next = null;\n      } else {\n        var previous = firstCallbackNode.previous;\n        firstCallbackNode = previous.next = next;\n        next.previous = previous;\n      }\n\n      flushedNode.next = flushedNode.previous = null; // Now it's safe to call the callback.\n\n      var callback = flushedNode.callback;\n      callback(deadlineObject);\n    }\n\n    function flushWork(didTimeout) {\n      isPerformingWork = true;\n      deadlineObject.didTimeout = didTimeout;\n\n      try {\n        if (didTimeout) {\n          // Flush all the timed out callbacks without yielding.\n          while (firstCallbackNode !== null) {\n            // Read the current time. Flush all the callbacks that expire at or\n            // earlier than that time. Then read the current time again and repeat.\n            // This optimizes for as few performance.now calls as possible.\n            var currentTime = exports.unstable_now();\n\n            if (firstCallbackNode.timesOutAt <= currentTime) {\n              do {\n                flushFirstCallback();\n              } while (firstCallbackNode !== null && firstCallbackNode.timesOutAt <= currentTime);\n\n              continue;\n            }\n\n            break;\n          }\n        } else {\n          // Keep flushing callbacks until we run out of time in the frame.\n          if (firstCallbackNode !== null) {\n            do {\n              flushFirstCallback();\n            } while (firstCallbackNode !== null && getFrameDeadline() - exports.unstable_now() > 0);\n          }\n        }\n      } finally {\n        isPerformingWork = false;\n\n        if (firstCallbackNode !== null) {\n          // There's still work remaining. Request another callback.\n          ensureHostCallbackIsScheduled(firstCallbackNode);\n        } else {\n          isHostCallbackScheduled = false;\n        }\n      }\n    }\n\n    function unstable_scheduleWork(callback, options) {\n      var currentTime = exports.unstable_now();\n      var timesOutAt;\n\n      if (options !== undefined && options !== null && options.timeout !== null && options.timeout !== undefined) {\n        // Check for an explicit timeout\n        timesOutAt = currentTime + options.timeout;\n      } else {\n        // Compute an absolute timeout using the default constant.\n        timesOutAt = currentTime + DEFERRED_TIMEOUT;\n      }\n\n      var newNode = {\n        callback: callback,\n        timesOutAt: timesOutAt,\n        next: null,\n        previous: null\n      }; // Insert the new callback into the list, sorted by its timeout.\n\n      if (firstCallbackNode === null) {\n        // This is the first callback in the list.\n        firstCallbackNode = newNode.next = newNode.previous = newNode;\n        ensureHostCallbackIsScheduled(firstCallbackNode);\n      } else {\n        var next = null;\n        var node = firstCallbackNode;\n\n        do {\n          if (node.timesOutAt > timesOutAt) {\n            // The new callback times out before this one.\n            next = node;\n            break;\n          }\n\n          node = node.next;\n        } while (node !== firstCallbackNode);\n\n        if (next === null) {\n          // No callback with a later timeout was found, which means the new\n          // callback has the latest timeout in the list.\n          next = firstCallbackNode;\n        } else if (next === firstCallbackNode) {\n          // The new callback has the earliest timeout in the entire list.\n          firstCallbackNode = newNode;\n          ensureHostCallbackIsScheduled(firstCallbackNode);\n        }\n\n        var previous = next.previous;\n        previous.next = next.previous = newNode;\n        newNode.next = next;\n        newNode.previous = previous;\n      }\n\n      return newNode;\n    }\n\n    function unstable_cancelScheduledWork(callbackNode) {\n      var next = callbackNode.next;\n\n      if (next === null) {\n        // Already cancelled.\n        return;\n      }\n\n      if (next === callbackNode) {\n        // This is the only scheduled callback. Clear the list.\n        firstCallbackNode = null;\n      } else {\n        // Remove the callback from its position in the list.\n        if (callbackNode === firstCallbackNode) {\n          firstCallbackNode = next;\n        }\n\n        var previous = callbackNode.previous;\n        previous.next = next;\n        next.previous = previous;\n      }\n\n      callbackNode.next = callbackNode.previous = null;\n    } // The remaining code is essentially a polyfill for requestIdleCallback. It\n    // works by scheduling a requestAnimationFrame, storing the time for the start\n    // of the frame, then scheduling a postMessage which gets scheduled after paint.\n    // Within the postMessage handler do as much work as possible until time + frame\n    // rate. By separating the idle call into a separate event tick we ensure that\n    // layout, paint and other browser work is counted against the available time.\n    // The frame rate is dynamically adjusted.\n    // We capture a local reference to any global, in case it gets polyfilled after\n    // this module is initially evaluated. We want to be using a\n    // consistent implementation.\n\n\n    var localDate = Date; // This initialization code may run even on server environments if a component\n    // just imports ReactDOM (e.g. for findDOMNode). Some environments might not\n    // have setTimeout or clearTimeout. However, we always expect them to be defined\n    // on the client. https://github.com/facebook/react/pull/13088\n\n    var localSetTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;\n    var localClearTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined; // We don't expect either of these to necessarily be defined, but we will error\n    // later if they are missing on the client.\n\n    var localRequestAnimationFrame = typeof requestAnimationFrame === 'function' ? requestAnimationFrame : undefined;\n    var localCancelAnimationFrame = typeof cancelAnimationFrame === 'function' ? cancelAnimationFrame : undefined; // requestAnimationFrame does not run when the tab is in the background. If\n    // we're backgrounded we prefer for that work to happen so that the page\n    // continues to load in the background. So we also schedule a 'setTimeout' as\n    // a fallback.\n    // TODO: Need a better heuristic for backgrounded work.\n\n    var ANIMATION_FRAME_TIMEOUT = 100;\n    var rAFID;\n    var rAFTimeoutID;\n\n    var requestAnimationFrameWithTimeout = function requestAnimationFrameWithTimeout(callback) {\n      // schedule rAF and also a setTimeout\n      rAFID = localRequestAnimationFrame(function (timestamp) {\n        // cancel the setTimeout\n        localClearTimeout(rAFTimeoutID);\n        callback(timestamp);\n      });\n      rAFTimeoutID = localSetTimeout(function () {\n        // cancel the requestAnimationFrame\n        localCancelAnimationFrame(rAFID);\n        callback(exports.unstable_now());\n      }, ANIMATION_FRAME_TIMEOUT);\n    };\n\n    if (hasNativePerformanceNow) {\n      var Performance = performance;\n\n      exports.unstable_now = function () {\n        return Performance.now();\n      };\n    } else {\n      exports.unstable_now = function () {\n        return localDate.now();\n      };\n    }\n\n    var requestCallback;\n    var cancelCallback;\n    var getFrameDeadline;\n\n    if (typeof window === 'undefined') {\n      // If this accidentally gets imported in a non-browser environment, fallback\n      // to a naive implementation.\n      var timeoutID = -1;\n\n      requestCallback = function requestCallback(callback, absoluteTimeout) {\n        timeoutID = setTimeout(callback, 0, true);\n      };\n\n      cancelCallback = function cancelCallback() {\n        clearTimeout(timeoutID);\n      };\n\n      getFrameDeadline = function getFrameDeadline() {\n        return 0;\n      };\n    } else if (window._schedMock) {\n      // Dynamic injection, only for testing purposes.\n      var impl = window._schedMock;\n      requestCallback = impl[0];\n      cancelCallback = impl[1];\n      getFrameDeadline = impl[2];\n    } else {\n      if (typeof console !== 'undefined') {\n        if (typeof localRequestAnimationFrame !== 'function') {\n          console.error(\"This browser doesn't support requestAnimationFrame. \" + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');\n        }\n\n        if (typeof localCancelAnimationFrame !== 'function') {\n          console.error(\"This browser doesn't support cancelAnimationFrame. \" + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');\n        }\n      }\n\n      var scheduledCallback = null;\n      var isIdleScheduled = false;\n      var timeoutTime = -1;\n      var isAnimationFrameScheduled = false;\n      var isPerformingIdleWork = false;\n      var frameDeadline = 0; // We start out assuming that we run at 30fps but then the heuristic tracking\n      // will adjust this value to a faster fps if we get more frequent animation\n      // frames.\n\n      var previousFrameTime = 33;\n      var activeFrameTime = 33;\n\n      getFrameDeadline = function getFrameDeadline() {\n        return frameDeadline;\n      }; // We use the postMessage trick to defer idle work until after the repaint.\n\n\n      var messageKey = '__reactIdleCallback$' + Math.random().toString(36).slice(2);\n\n      var idleTick = function idleTick(event) {\n        if (event.source !== window || event.data !== messageKey) {\n          return;\n        }\n\n        isIdleScheduled = false;\n        var currentTime = exports.unstable_now();\n        var didTimeout = false;\n\n        if (frameDeadline - currentTime <= 0) {\n          // There's no time left in this idle period. Check if the callback has\n          // a timeout and whether it's been exceeded.\n          if (timeoutTime !== -1 && timeoutTime <= currentTime) {\n            // Exceeded the timeout. Invoke the callback even though there's no\n            // time left.\n            didTimeout = true;\n          } else {\n            // No timeout.\n            if (!isAnimationFrameScheduled) {\n              // Schedule another animation callback so we retry later.\n              isAnimationFrameScheduled = true;\n              requestAnimationFrameWithTimeout(animationTick);\n            } // Exit without invoking the callback.\n\n\n            return;\n          }\n        }\n\n        timeoutTime = -1;\n        var callback = scheduledCallback;\n        scheduledCallback = null;\n\n        if (callback !== null) {\n          isPerformingIdleWork = true;\n\n          try {\n            callback(didTimeout);\n          } finally {\n            isPerformingIdleWork = false;\n          }\n        }\n      }; // Assumes that we have addEventListener in this environment. Might need\n      // something better for old IE.\n\n\n      window.addEventListener('message', idleTick, false);\n\n      var animationTick = function animationTick(rafTime) {\n        isAnimationFrameScheduled = false;\n        var nextFrameTime = rafTime - frameDeadline + activeFrameTime;\n\n        if (nextFrameTime < activeFrameTime && previousFrameTime < activeFrameTime) {\n          if (nextFrameTime < 8) {\n            // Defensive coding. We don't support higher frame rates than 120hz.\n            // If we get lower than that, it is probably a bug.\n            nextFrameTime = 8;\n          } // If one frame goes long, then the next one can be short to catch up.\n          // If two frames are short in a row, then that's an indication that we\n          // actually have a higher frame rate than what we're currently optimizing.\n          // We adjust our heuristic dynamically accordingly. For example, if we're\n          // running on 120hz display or 90hz VR display.\n          // Take the max of the two in case one of them was an anomaly due to\n          // missed frame deadlines.\n\n\n          activeFrameTime = nextFrameTime < previousFrameTime ? previousFrameTime : nextFrameTime;\n        } else {\n          previousFrameTime = nextFrameTime;\n        }\n\n        frameDeadline = rafTime + activeFrameTime;\n\n        if (!isIdleScheduled) {\n          isIdleScheduled = true;\n          window.postMessage(messageKey, '*');\n        }\n      };\n\n      requestCallback = function requestCallback(callback, absoluteTimeout) {\n        scheduledCallback = callback;\n        timeoutTime = absoluteTimeout;\n\n        if (isPerformingIdleWork) {\n          // If we're already performing idle work, an error must have been thrown.\n          // Don't wait for the next frame. Continue working ASAP, in a new event.\n          window.postMessage(messageKey, '*');\n        } else if (!isAnimationFrameScheduled) {\n          // If rAF didn't already schedule one, we need to schedule a frame.\n          // TODO: If this rAF doesn't materialize because the browser throttles, we\n          // might want to still have setTimeout trigger rIC as a backup to ensure\n          // that we keep performing work.\n          isAnimationFrameScheduled = true;\n          requestAnimationFrameWithTimeout(animationTick);\n        }\n      };\n\n      cancelCallback = function cancelCallback() {\n        scheduledCallback = null;\n        isIdleScheduled = false;\n        timeoutTime = -1;\n      };\n    }\n\n    exports.unstable_scheduleWork = unstable_scheduleWork;\n    exports.unstable_cancelScheduledWork = unstable_cancelScheduledWork;\n  })();\n}","map":{"version":3,"sources":["/Users/vmadhugiri/Desktop/Github/local-instagram/instagram-course-7/node_modules/schedule/cjs/schedule.development.js"],"names":["process","env","NODE_ENV","Object","defineProperty","exports","value","DEFERRED_TIMEOUT","firstCallbackNode","isPerformingWork","isHostCallbackScheduled","hasNativePerformanceNow","performance","now","timeRemaining","remaining","getFrameDeadline","Date","deadlineObject","didTimeout","ensureHostCallbackIsScheduled","timesOutAt","cancelCallback","requestCallback","flushWork","flushFirstCallback","node","flushedNode","next","previous","callback","currentTime","unstable_now","unstable_scheduleWork","options","undefined","timeout","newNode","unstable_cancelScheduledWork","callbackNode","localDate","localSetTimeout","setTimeout","localClearTimeout","clearTimeout","localRequestAnimationFrame","requestAnimationFrame","localCancelAnimationFrame","cancelAnimationFrame","ANIMATION_FRAME_TIMEOUT","rAFID","rAFTimeoutID","requestAnimationFrameWithTimeout","timestamp","Performance","window","timeoutID","absoluteTimeout","_schedMock","impl","console","error","scheduledCallback","isIdleScheduled","timeoutTime","isAnimationFrameScheduled","isPerformingIdleWork","frameDeadline","previousFrameTime","activeFrameTime","messageKey","Math","random","toString","slice","idleTick","event","source","data","animationTick","addEventListener","rafTime","nextFrameTime","postMessage"],"mappings":"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","sourcesContent":["/** @license React v16.5.2\n * schedule.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\n\n\nif (process.env.NODE_ENV !== \"production\") {\n  (function() {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n/* eslint-disable no-var */\n\n// TODO: Currently there's only a single priority level, Deferred. Will add\n// additional priorities.\nvar DEFERRED_TIMEOUT = 5000;\n\n// Callbacks are stored as a circular, doubly linked list.\nvar firstCallbackNode = null;\n\nvar isPerformingWork = false;\n\nvar isHostCallbackScheduled = false;\n\nvar hasNativePerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';\n\nvar timeRemaining;\nif (hasNativePerformanceNow) {\n  timeRemaining = function () {\n    // We assume that if we have a performance timer that the rAF callback\n    // gets a performance timer value. Not sure if this is always true.\n    var remaining = getFrameDeadline() - performance.now();\n    return remaining > 0 ? remaining : 0;\n  };\n} else {\n  timeRemaining = function () {\n    // Fallback to Date.now()\n    var remaining = getFrameDeadline() - Date.now();\n    return remaining > 0 ? remaining : 0;\n  };\n}\n\nvar deadlineObject = {\n  timeRemaining: timeRemaining,\n  didTimeout: false\n};\n\nfunction ensureHostCallbackIsScheduled() {\n  if (isPerformingWork) {\n    // Don't schedule work yet; wait until the next time we yield.\n    return;\n  }\n  // Schedule the host callback using the earliest timeout in the list.\n  var timesOutAt = firstCallbackNode.timesOutAt;\n  if (!isHostCallbackScheduled) {\n    isHostCallbackScheduled = true;\n  } else {\n    // Cancel the existing host callback.\n    cancelCallback();\n  }\n  requestCallback(flushWork, timesOutAt);\n}\n\nfunction flushFirstCallback(node) {\n  var flushedNode = firstCallbackNode;\n\n  // Remove the node from the list before calling the callback. That way the\n  // list is in a consistent state even if the callback throws.\n  var next = firstCallbackNode.next;\n  if (firstCallbackNode === next) {\n    // This is the last callback in the list.\n    firstCallbackNode = null;\n    next = null;\n  } else {\n    var previous = firstCallbackNode.previous;\n    firstCallbackNode = previous.next = next;\n    next.previous = previous;\n  }\n\n  flushedNode.next = flushedNode.previous = null;\n\n  // Now it's safe to call the callback.\n  var callback = flushedNode.callback;\n  callback(deadlineObject);\n}\n\nfunction flushWork(didTimeout) {\n  isPerformingWork = true;\n  deadlineObject.didTimeout = didTimeout;\n  try {\n    if (didTimeout) {\n      // Flush all the timed out callbacks without yielding.\n      while (firstCallbackNode !== null) {\n        // Read the current time. Flush all the callbacks that expire at or\n        // earlier than that time. Then read the current time again and repeat.\n        // This optimizes for as few performance.now calls as possible.\n        var currentTime = exports.unstable_now();\n        if (firstCallbackNode.timesOutAt <= currentTime) {\n          do {\n            flushFirstCallback();\n          } while (firstCallbackNode !== null && firstCallbackNode.timesOutAt <= currentTime);\n          continue;\n        }\n        break;\n      }\n    } else {\n      // Keep flushing callbacks until we run out of time in the frame.\n      if (firstCallbackNode !== null) {\n        do {\n          flushFirstCallback();\n        } while (firstCallbackNode !== null && getFrameDeadline() - exports.unstable_now() > 0);\n      }\n    }\n  } finally {\n    isPerformingWork = false;\n    if (firstCallbackNode !== null) {\n      // There's still work remaining. Request another callback.\n      ensureHostCallbackIsScheduled(firstCallbackNode);\n    } else {\n      isHostCallbackScheduled = false;\n    }\n  }\n}\n\nfunction unstable_scheduleWork(callback, options) {\n  var currentTime = exports.unstable_now();\n\n  var timesOutAt;\n  if (options !== undefined && options !== null && options.timeout !== null && options.timeout !== undefined) {\n    // Check for an explicit timeout\n    timesOutAt = currentTime + options.timeout;\n  } else {\n    // Compute an absolute timeout using the default constant.\n    timesOutAt = currentTime + DEFERRED_TIMEOUT;\n  }\n\n  var newNode = {\n    callback: callback,\n    timesOutAt: timesOutAt,\n    next: null,\n    previous: null\n  };\n\n  // Insert the new callback into the list, sorted by its timeout.\n  if (firstCallbackNode === null) {\n    // This is the first callback in the list.\n    firstCallbackNode = newNode.next = newNode.previous = newNode;\n    ensureHostCallbackIsScheduled(firstCallbackNode);\n  } else {\n    var next = null;\n    var node = firstCallbackNode;\n    do {\n      if (node.timesOutAt > timesOutAt) {\n        // The new callback times out before this one.\n        next = node;\n        break;\n      }\n      node = node.next;\n    } while (node !== firstCallbackNode);\n\n    if (next === null) {\n      // No callback with a later timeout was found, which means the new\n      // callback has the latest timeout in the list.\n      next = firstCallbackNode;\n    } else if (next === firstCallbackNode) {\n      // The new callback has the earliest timeout in the entire list.\n      firstCallbackNode = newNode;\n      ensureHostCallbackIsScheduled(firstCallbackNode);\n    }\n\n    var previous = next.previous;\n    previous.next = next.previous = newNode;\n    newNode.next = next;\n    newNode.previous = previous;\n  }\n\n  return newNode;\n}\n\nfunction unstable_cancelScheduledWork(callbackNode) {\n  var next = callbackNode.next;\n  if (next === null) {\n    // Already cancelled.\n    return;\n  }\n\n  if (next === callbackNode) {\n    // This is the only scheduled callback. Clear the list.\n    firstCallbackNode = null;\n  } else {\n    // Remove the callback from its position in the list.\n    if (callbackNode === firstCallbackNode) {\n      firstCallbackNode = next;\n    }\n    var previous = callbackNode.previous;\n    previous.next = next;\n    next.previous = previous;\n  }\n\n  callbackNode.next = callbackNode.previous = null;\n}\n\n// The remaining code is essentially a polyfill for requestIdleCallback. It\n// works by scheduling a requestAnimationFrame, storing the time for the start\n// of the frame, then scheduling a postMessage which gets scheduled after paint.\n// Within the postMessage handler do as much work as possible until time + frame\n// rate. By separating the idle call into a separate event tick we ensure that\n// layout, paint and other browser work is counted against the available time.\n// The frame rate is dynamically adjusted.\n\n// We capture a local reference to any global, in case it gets polyfilled after\n// this module is initially evaluated. We want to be using a\n// consistent implementation.\nvar localDate = Date;\n\n// This initialization code may run even on server environments if a component\n// just imports ReactDOM (e.g. for findDOMNode). Some environments might not\n// have setTimeout or clearTimeout. However, we always expect them to be defined\n// on the client. https://github.com/facebook/react/pull/13088\nvar localSetTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;\nvar localClearTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined;\n\n// We don't expect either of these to necessarily be defined, but we will error\n// later if they are missing on the client.\nvar localRequestAnimationFrame = typeof requestAnimationFrame === 'function' ? requestAnimationFrame : undefined;\nvar localCancelAnimationFrame = typeof cancelAnimationFrame === 'function' ? cancelAnimationFrame : undefined;\n\n// requestAnimationFrame does not run when the tab is in the background. If\n// we're backgrounded we prefer for that work to happen so that the page\n// continues to load in the background. So we also schedule a 'setTimeout' as\n// a fallback.\n// TODO: Need a better heuristic for backgrounded work.\nvar ANIMATION_FRAME_TIMEOUT = 100;\nvar rAFID;\nvar rAFTimeoutID;\nvar requestAnimationFrameWithTimeout = function (callback) {\n  // schedule rAF and also a setTimeout\n  rAFID = localRequestAnimationFrame(function (timestamp) {\n    // cancel the setTimeout\n    localClearTimeout(rAFTimeoutID);\n    callback(timestamp);\n  });\n  rAFTimeoutID = localSetTimeout(function () {\n    // cancel the requestAnimationFrame\n    localCancelAnimationFrame(rAFID);\n    callback(exports.unstable_now());\n  }, ANIMATION_FRAME_TIMEOUT);\n};\n\nif (hasNativePerformanceNow) {\n  var Performance = performance;\n  exports.unstable_now = function () {\n    return Performance.now();\n  };\n} else {\n  exports.unstable_now = function () {\n    return localDate.now();\n  };\n}\n\nvar requestCallback;\nvar cancelCallback;\nvar getFrameDeadline;\n\nif (typeof window === 'undefined') {\n  // If this accidentally gets imported in a non-browser environment, fallback\n  // to a naive implementation.\n  var timeoutID = -1;\n  requestCallback = function (callback, absoluteTimeout) {\n    timeoutID = setTimeout(callback, 0, true);\n  };\n  cancelCallback = function () {\n    clearTimeout(timeoutID);\n  };\n  getFrameDeadline = function () {\n    return 0;\n  };\n} else if (window._schedMock) {\n  // Dynamic injection, only for testing purposes.\n  var impl = window._schedMock;\n  requestCallback = impl[0];\n  cancelCallback = impl[1];\n  getFrameDeadline = impl[2];\n} else {\n  if (typeof console !== 'undefined') {\n    if (typeof localRequestAnimationFrame !== 'function') {\n      console.error(\"This browser doesn't support requestAnimationFrame. \" + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');\n    }\n    if (typeof localCancelAnimationFrame !== 'function') {\n      console.error(\"This browser doesn't support cancelAnimationFrame. \" + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');\n    }\n  }\n\n  var scheduledCallback = null;\n  var isIdleScheduled = false;\n  var timeoutTime = -1;\n\n  var isAnimationFrameScheduled = false;\n\n  var isPerformingIdleWork = false;\n\n  var frameDeadline = 0;\n  // We start out assuming that we run at 30fps but then the heuristic tracking\n  // will adjust this value to a faster fps if we get more frequent animation\n  // frames.\n  var previousFrameTime = 33;\n  var activeFrameTime = 33;\n\n  getFrameDeadline = function () {\n    return frameDeadline;\n  };\n\n  // We use the postMessage trick to defer idle work until after the repaint.\n  var messageKey = '__reactIdleCallback$' + Math.random().toString(36).slice(2);\n  var idleTick = function (event) {\n    if (event.source !== window || event.data !== messageKey) {\n      return;\n    }\n\n    isIdleScheduled = false;\n\n    var currentTime = exports.unstable_now();\n\n    var didTimeout = false;\n    if (frameDeadline - currentTime <= 0) {\n      // There's no time left in this idle period. Check if the callback has\n      // a timeout and whether it's been exceeded.\n      if (timeoutTime !== -1 && timeoutTime <= currentTime) {\n        // Exceeded the timeout. Invoke the callback even though there's no\n        // time left.\n        didTimeout = true;\n      } else {\n        // No timeout.\n        if (!isAnimationFrameScheduled) {\n          // Schedule another animation callback so we retry later.\n          isAnimationFrameScheduled = true;\n          requestAnimationFrameWithTimeout(animationTick);\n        }\n        // Exit without invoking the callback.\n        return;\n      }\n    }\n\n    timeoutTime = -1;\n    var callback = scheduledCallback;\n    scheduledCallback = null;\n    if (callback !== null) {\n      isPerformingIdleWork = true;\n      try {\n        callback(didTimeout);\n      } finally {\n        isPerformingIdleWork = false;\n      }\n    }\n  };\n  // Assumes that we have addEventListener in this environment. Might need\n  // something better for old IE.\n  window.addEventListener('message', idleTick, false);\n\n  var animationTick = function (rafTime) {\n    isAnimationFrameScheduled = false;\n    var nextFrameTime = rafTime - frameDeadline + activeFrameTime;\n    if (nextFrameTime < activeFrameTime && previousFrameTime < activeFrameTime) {\n      if (nextFrameTime < 8) {\n        // Defensive coding. We don't support higher frame rates than 120hz.\n        // If we get lower than that, it is probably a bug.\n        nextFrameTime = 8;\n      }\n      // If one frame goes long, then the next one can be short to catch up.\n      // If two frames are short in a row, then that's an indication that we\n      // actually have a higher frame rate than what we're currently optimizing.\n      // We adjust our heuristic dynamically accordingly. For example, if we're\n      // running on 120hz display or 90hz VR display.\n      // Take the max of the two in case one of them was an anomaly due to\n      // missed frame deadlines.\n      activeFrameTime = nextFrameTime < previousFrameTime ? previousFrameTime : nextFrameTime;\n    } else {\n      previousFrameTime = nextFrameTime;\n    }\n    frameDeadline = rafTime + activeFrameTime;\n    if (!isIdleScheduled) {\n      isIdleScheduled = true;\n      window.postMessage(messageKey, '*');\n    }\n  };\n\n  requestCallback = function (callback, absoluteTimeout) {\n    scheduledCallback = callback;\n    timeoutTime = absoluteTimeout;\n    if (isPerformingIdleWork) {\n      // If we're already performing idle work, an error must have been thrown.\n      // Don't wait for the next frame. Continue working ASAP, in a new event.\n      window.postMessage(messageKey, '*');\n    } else if (!isAnimationFrameScheduled) {\n      // If rAF didn't already schedule one, we need to schedule a frame.\n      // TODO: If this rAF doesn't materialize because the browser throttles, we\n      // might want to still have setTimeout trigger rIC as a backup to ensure\n      // that we keep performing work.\n      isAnimationFrameScheduled = true;\n      requestAnimationFrameWithTimeout(animationTick);\n    }\n  };\n\n  cancelCallback = function () {\n    scheduledCallback = null;\n    isIdleScheduled = false;\n    timeoutTime = -1;\n  };\n}\n\nexports.unstable_scheduleWork = unstable_scheduleWork;\nexports.unstable_cancelScheduledWork = unstable_cancelScheduledWork;\n  })();\n}\n"]},"metadata":{},"sourceType":"script"}